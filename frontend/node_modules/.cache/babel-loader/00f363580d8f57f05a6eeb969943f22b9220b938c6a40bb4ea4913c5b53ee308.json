{"ast":null,"code":"export default function Grid(_ref) {\n  let {\n    swiper,\n    extendParams\n  } = _ref;\n  extendParams({\n    grid: {\n      rows: 1,\n      fill: 'column'\n    }\n  });\n  let slidesNumberEvenToRows;\n  let slidesPerRow;\n  let numFullColumns;\n  const initSlides = slidesLength => {\n    const {\n      slidesPerView\n    } = swiper.params;\n    const {\n      rows,\n      fill\n    } = swiper.params.grid;\n    slidesPerRow = slidesNumberEvenToRows / rows;\n    numFullColumns = Math.floor(slidesLength / rows);\n    if (Math.floor(slidesLength / rows) === slidesLength / rows) {\n      slidesNumberEvenToRows = slidesLength;\n    } else {\n      slidesNumberEvenToRows = Math.ceil(slidesLength / rows) * rows;\n    }\n    if (slidesPerView !== 'auto' && fill === 'row') {\n      slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, slidesPerView * rows);\n    }\n  };\n  const updateSlide = (i, slide, slidesLength, getDirectionLabel) => {\n    const {\n      slidesPerGroup,\n      spaceBetween\n    } = swiper.params;\n    const {\n      rows,\n      fill\n    } = swiper.params.grid;\n    // Set slides order\n    let newSlideOrderIndex;\n    let column;\n    let row;\n    if (fill === 'row' && slidesPerGroup > 1) {\n      const groupIndex = Math.floor(i / (slidesPerGroup * rows));\n      const slideIndexInGroup = i - rows * slidesPerGroup * groupIndex;\n      const columnsInGroup = groupIndex === 0 ? slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * rows * slidesPerGroup) / rows), slidesPerGroup);\n      row = Math.floor(slideIndexInGroup / columnsInGroup);\n      column = slideIndexInGroup - row * columnsInGroup + groupIndex * slidesPerGroup;\n      newSlideOrderIndex = column + row * slidesNumberEvenToRows / rows;\n      slide.style.order = newSlideOrderIndex;\n    } else if (fill === 'column') {\n      column = Math.floor(i / rows);\n      row = i - column * rows;\n      if (column > numFullColumns || column === numFullColumns && row === rows - 1) {\n        row += 1;\n        if (row >= rows) {\n          row = 0;\n          column += 1;\n        }\n      }\n    } else {\n      row = Math.floor(i / slidesPerRow);\n      column = i - row * slidesPerRow;\n    }\n    slide.style[getDirectionLabel('margin-top')] = row !== 0 ? spaceBetween && `${spaceBetween}px` : '';\n  };\n  const updateWrapperSize = (slideSize, snapGrid, getDirectionLabel) => {\n    const {\n      spaceBetween,\n      centeredSlides,\n      roundLengths\n    } = swiper.params;\n    const {\n      rows\n    } = swiper.params.grid;\n    swiper.virtualSize = (slideSize + spaceBetween) * slidesNumberEvenToRows;\n    swiper.virtualSize = Math.ceil(swiper.virtualSize / rows) - spaceBetween;\n    swiper.wrapperEl.style[getDirectionLabel('width')] = `${swiper.virtualSize + spaceBetween}px`;\n    if (centeredSlides) {\n      const newSlidesGrid = [];\n      for (let i = 0; i < snapGrid.length; i += 1) {\n        let slidesGridItem = snapGrid[i];\n        if (roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n        if (snapGrid[i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);\n      }\n      snapGrid.splice(0, snapGrid.length);\n      snapGrid.push(...newSlidesGrid);\n    }\n  };\n  swiper.grid = {\n    initSlides,\n    updateSlide,\n    updateWrapperSize\n  };\n}","map":{"version":3,"names":["Grid","swiper","extendParams","grid","rows","fill","slidesNumberEvenToRows","slidesPerRow","numFullColumns","initSlides","slidesLength","slidesPerView","params","Math","floor","ceil","max","updateSlide","i","slide","getDirectionLabel","slidesPerGroup","spaceBetween","newSlideOrderIndex","column","row","groupIndex","slideIndexInGroup","columnsInGroup","min","style","order","updateWrapperSize","slideSize","snapGrid","centeredSlides","roundLengths","virtualSize","wrapperEl","newSlidesGrid","length","slidesGridItem","push","splice"],"sources":["D:/Inspobox/frontend/node_modules/swiper/modules/grid/grid.js"],"sourcesContent":["export default function Grid({\r\n  swiper,\r\n  extendParams\r\n}) {\r\n  extendParams({\r\n    grid: {\r\n      rows: 1,\r\n      fill: 'column'\r\n    }\r\n  });\r\n  let slidesNumberEvenToRows;\r\n  let slidesPerRow;\r\n  let numFullColumns;\r\n  const initSlides = slidesLength => {\r\n    const {\r\n      slidesPerView\r\n    } = swiper.params;\r\n    const {\r\n      rows,\r\n      fill\r\n    } = swiper.params.grid;\r\n    slidesPerRow = slidesNumberEvenToRows / rows;\r\n    numFullColumns = Math.floor(slidesLength / rows);\r\n    if (Math.floor(slidesLength / rows) === slidesLength / rows) {\r\n      slidesNumberEvenToRows = slidesLength;\r\n    } else {\r\n      slidesNumberEvenToRows = Math.ceil(slidesLength / rows) * rows;\r\n    }\r\n    if (slidesPerView !== 'auto' && fill === 'row') {\r\n      slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, slidesPerView * rows);\r\n    }\r\n  };\r\n  const updateSlide = (i, slide, slidesLength, getDirectionLabel) => {\r\n    const {\r\n      slidesPerGroup,\r\n      spaceBetween\r\n    } = swiper.params;\r\n    const {\r\n      rows,\r\n      fill\r\n    } = swiper.params.grid;\r\n    // Set slides order\r\n    let newSlideOrderIndex;\r\n    let column;\r\n    let row;\r\n    if (fill === 'row' && slidesPerGroup > 1) {\r\n      const groupIndex = Math.floor(i / (slidesPerGroup * rows));\r\n      const slideIndexInGroup = i - rows * slidesPerGroup * groupIndex;\r\n      const columnsInGroup = groupIndex === 0 ? slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * rows * slidesPerGroup) / rows), slidesPerGroup);\r\n      row = Math.floor(slideIndexInGroup / columnsInGroup);\r\n      column = slideIndexInGroup - row * columnsInGroup + groupIndex * slidesPerGroup;\r\n      newSlideOrderIndex = column + row * slidesNumberEvenToRows / rows;\r\n      slide.style.order = newSlideOrderIndex;\r\n    } else if (fill === 'column') {\r\n      column = Math.floor(i / rows);\r\n      row = i - column * rows;\r\n      if (column > numFullColumns || column === numFullColumns && row === rows - 1) {\r\n        row += 1;\r\n        if (row >= rows) {\r\n          row = 0;\r\n          column += 1;\r\n        }\r\n      }\r\n    } else {\r\n      row = Math.floor(i / slidesPerRow);\r\n      column = i - row * slidesPerRow;\r\n    }\r\n    slide.style[getDirectionLabel('margin-top')] = row !== 0 ? spaceBetween && `${spaceBetween}px` : '';\r\n  };\r\n  const updateWrapperSize = (slideSize, snapGrid, getDirectionLabel) => {\r\n    const {\r\n      spaceBetween,\r\n      centeredSlides,\r\n      roundLengths\r\n    } = swiper.params;\r\n    const {\r\n      rows\r\n    } = swiper.params.grid;\r\n    swiper.virtualSize = (slideSize + spaceBetween) * slidesNumberEvenToRows;\r\n    swiper.virtualSize = Math.ceil(swiper.virtualSize / rows) - spaceBetween;\r\n    swiper.wrapperEl.style[getDirectionLabel('width')] = `${swiper.virtualSize + spaceBetween}px`;\r\n    if (centeredSlides) {\r\n      const newSlidesGrid = [];\r\n      for (let i = 0; i < snapGrid.length; i += 1) {\r\n        let slidesGridItem = snapGrid[i];\r\n        if (roundLengths) slidesGridItem = Math.floor(slidesGridItem);\r\n        if (snapGrid[i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);\r\n      }\r\n      snapGrid.splice(0, snapGrid.length);\r\n      snapGrid.push(...newSlidesGrid);\r\n    }\r\n  };\r\n  swiper.grid = {\r\n    initSlides,\r\n    updateSlide,\r\n    updateWrapperSize\r\n  };\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}