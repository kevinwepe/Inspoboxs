{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport JWTDecode from 'jwt-decode';\nimport { openAlert } from \"./AlertSlice\";\nimport axios from \"axios\";\nconst API = axios.create({\n  baseURL: `${process.env.REACT_APP_BASE_API_URL}/auth`\n});\nconst user = JSON.parse(localStorage.getItem('token'));\nconst initialState = {\n  token: user,\n  user: null\n};\nexport const loginHandler = createAsyncThunk('auth/login', async _ref => {\n  let {\n    loginForm,\n    setlogin,\n    dispatch\n  } = _ref;\n  try {\n    dispatch(openAlert({\n      message: 'Authenticated user..',\n      variant: 'bg-blue-50',\n      textVariant: 'text-blue-500'\n    }));\n    const {\n      data\n    } = await API.post('/login', loginForm);\n    if (data) {\n      setlogin(false);\n      return data;\n    }\n  } catch (err) {\n    const {\n      response: {\n        data\n      }\n    } = err;\n    dispatch(openAlert({\n      message: data.message,\n      variant: 'bg-red-50',\n      textVariant: 'text-red-500'\n    }));\n  }\n});\nexport const registerHandler = createAsyncThunk('auth/register', async _ref2 => {\n  let {\n    registerForm,\n    dispatch,\n    setregister\n  } = _ref2;\n  try {\n    dispatch(openAlert({\n      message: 'Creating user..',\n      variant: 'bg-blue-50',\n      textVariant: 'text-blue-500'\n    }));\n    const {\n      data\n    } = await API.post('/login', registerForm);\n    if (data) {\n      setregister(false);\n      return data;\n    }\n  } catch (err) {\n    return null;\n  }\n});\nconst AuthSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    logoutHandler(state) {\n      state.token = null;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(loginHandler.fulfilled, (state, _ref3) => {\n      let {\n        payload\n      } = _ref3;\n      state.token = payload.token;\n      state.user = payload.token ? JWTDecode(payload.token) : null;\n      localStorage.setItem('token', JSON.stringify(state.token));\n      return state;\n    });\n    builder.addCase(registerHandler.fulfilled, (state, _ref4) => {\n      let {\n        payload\n      } = _ref4;\n      state.token = payload.token;\n      state.user = payload.token ? JWTDecode(payload.token) : null;\n      localStorage.setItem('token', JSON.stringify(state.token));\n      return state;\n    });\n  }\n});\nexport default AuthSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","JWTDecode","openAlert","axios","API","create","baseURL","process","env","REACT_APP_BASE_API_URL","user","JSON","parse","localStorage","getItem","initialState","token","loginHandler","loginForm","setlogin","dispatch","message","variant","textVariant","data","post","err","response","registerHandler","registerForm","setregister","AuthSlice","name","reducers","logoutHandler","state","extraReducers","builder","addCase","fulfilled","payload","setItem","stringify","reducer"],"sources":["D:/programmer/project-pl/inspobox/frontend/src/slices/AuthSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport JWTDecode from 'jwt-decode';\r\nimport { openAlert } from \"./AlertSlice\";\r\nimport axios from \"axios\";\r\n\r\nconst API = axios.create({\r\n   baseURL:`${process.env.REACT_APP_BASE_API_URL}/auth`\r\n});\r\n\r\nconst user = JSON.parse(localStorage.getItem('token'));\r\n\r\nconst initialState = {\r\n    token:user,\r\n    user:null, \r\n}\r\n\r\nexport const loginHandler = createAsyncThunk('auth/login' , async ({ loginForm,setlogin,dispatch }) => {\r\n    try {\r\n       dispatch(openAlert({\r\n          message:'Authenticated user..',\r\n          variant:'bg-blue-50',\r\n          textVariant:'text-blue-500'\r\n       }));\r\n\r\n        const { data } = await API.post('/login' , loginForm);\r\n        if(data) {\r\n            setlogin(false);\r\n            return data;\r\n        }\r\n\r\n    } catch(err) {\r\n        const { response:{ data} } = err;\r\n        dispatch(openAlert({\r\n            message:data.message,\r\n            variant:'bg-red-50',\r\n            textVariant:'text-red-500'\r\n         }));\r\n    }\r\n});\r\n\r\nexport const registerHandler = createAsyncThunk('auth/register' , async ({ registerForm,dispatch,setregister }) => {\r\n     try {\r\n        dispatch(openAlert({\r\n            message:'Creating user..',\r\n            variant:'bg-blue-50',\r\n            textVariant:'text-blue-500'\r\n         }));\r\n  \r\n        const { data } = await API.post('/login' , registerForm);\r\n        if(data) {\r\n            setregister(false);\r\n            return data;\r\n        }\r\n\r\n     }catch(err) {\r\n        return null;\r\n     }\r\n});\r\n\r\nconst AuthSlice = createSlice({\r\n    name:'auth', \r\n    initialState,\r\n    reducers: {\r\n        logoutHandler(state) {\r\n            state.token = null;\r\n        }\r\n    },\r\n    extraReducers:(builder)=> {\r\n       builder.addCase(loginHandler.fulfilled, (state, { payload }) => {\r\n          state.token = payload.token;\r\n          state.user = payload.token ? JWTDecode(payload.token) : null;\r\n\r\n          localStorage.setItem('token' , JSON.stringify(state.token));\r\n          return state;\r\n       });\r\n\r\n       builder.addCase(registerHandler.fulfilled, (state,  { payload }) => {\r\n        state.token = payload.token;\r\n        state.user = payload.token ? JWTDecode(payload.token) : null;\r\n\r\n        localStorage.setItem('token' , JSON.stringify(state.token));\r\n        return state;\r\n       });\r\n    }\r\n});\r\n\r\nexport default AuthSlice.reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}